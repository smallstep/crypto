name: CI

on:
  push:
    tags-ignore:
    - 'v*'
    branches:
    - "**"
  pull_request:

jobs:
  ci:
    if: false
    uses: smallstep/workflows/.github/workflows/goCI.yml@main
    with:
      os-dependencies: "libpcsclite-dev"

  static-code-analysis:
    if: false
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'go' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    #  # Initializes the CodeQL tools for scanning.
    #  - name: Initialize CodeQL
    #    uses: github/codeql-action/init@v2
    #    with:
    #      languages: ${{ matrix.language }}
    #      # If you wish to specify custom queries, you can do so here or in a config file.
    #      # By default, queries listed here will override any specified in a config file.
    #      # Prefix the list here with "+" to use these queries and those in the config file.

    #      # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
    #      # queries: security-extended,security-and-quality


    #  # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    #  # If this step fails, then you should remove it and run the build manually (see below)
    #  - name: Autobuild
    #    uses: github/codeql-action/autobuild@v2

    #  # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    #  # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #  #   If the Autobuild fails above, remove it and uncomment the following three lines.
    #  #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    #  # - run: |
    #  #   echo "Run, Build Application using script"
    #  #   ./location_of_script_within_repo/buildscript.sh

    #  - name: Perform CodeQL Analysis
    #    uses: github/codeql-action/analyze@v2

    - uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE_KEY }}

    - uses: actions/download-artifact@v3
      with:
        name: gitleaks-results.sarif

    - uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: gitleaks-results.sarif

  gitleaks:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure GitLeaks
      if:  hashFiles('.gitleaks.toml') == ''
      run: |
        curl -o ./gitleaks.toml https://raw.githubusercontent.com/smallstep/workflows/master/.gitleaks.toml

    - uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE_KEY }}
        GITLEAKS_ENABLE_COMMENTS: true

    - name: Setup tmate session
      if: always()
      uses: mxschmitt/action-tmate@v3

    - uses: actions/download-artifact@v3
      if: always()
      with:
        name: gitleaks-results.sarif

    - uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: ./gitleaks-results.sarif
