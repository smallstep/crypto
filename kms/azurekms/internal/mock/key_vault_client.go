// Code generated by MockGen. DO NOT EDIT.
// Source: go.step.sm/crypto/kms/azurekms (interfaces: KeyVaultClient)
//
// Generated by this command:
//
//	mockgen -package mock -mock_names=KeyVaultClient=KeyVaultClient -destination internal/mock/key_vault_client.go go.step.sm/crypto/kms/azurekms KeyVaultClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	azkeys "github.com/Azure/azure-sdk-for-go/sdk/security/keyvault/azkeys"
	gomock "go.uber.org/mock/gomock"
)

// KeyVaultClient is a mock of KeyVaultClient interface.
type KeyVaultClient struct {
	ctrl     *gomock.Controller
	recorder *KeyVaultClientMockRecorder
	isgomock struct{}
}

// KeyVaultClientMockRecorder is the mock recorder for KeyVaultClient.
type KeyVaultClientMockRecorder struct {
	mock *KeyVaultClient
}

// NewKeyVaultClient creates a new mock instance.
func NewKeyVaultClient(ctrl *gomock.Controller) *KeyVaultClient {
	mock := &KeyVaultClient{ctrl: ctrl}
	mock.recorder = &KeyVaultClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *KeyVaultClient) EXPECT() *KeyVaultClientMockRecorder {
	return m.recorder
}

// CreateKey mocks base method.
func (m *KeyVaultClient) CreateKey(ctx context.Context, name string, parameters azkeys.CreateKeyParameters, options *azkeys.CreateKeyOptions) (azkeys.CreateKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKey", ctx, name, parameters, options)
	ret0, _ := ret[0].(azkeys.CreateKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKey indicates an expected call of CreateKey.
func (mr *KeyVaultClientMockRecorder) CreateKey(ctx, name, parameters, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKey", reflect.TypeOf((*KeyVaultClient)(nil).CreateKey), ctx, name, parameters, options)
}

// GetKey mocks base method.
func (m *KeyVaultClient) GetKey(ctx context.Context, name, version string, options *azkeys.GetKeyOptions) (azkeys.GetKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", ctx, name, version, options)
	ret0, _ := ret[0].(azkeys.GetKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKey indicates an expected call of GetKey.
func (mr *KeyVaultClientMockRecorder) GetKey(ctx, name, version, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*KeyVaultClient)(nil).GetKey), ctx, name, version, options)
}

// Sign mocks base method.
func (m *KeyVaultClient) Sign(ctx context.Context, name, version string, parameters azkeys.SignParameters, options *azkeys.SignOptions) (azkeys.SignResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", ctx, name, version, parameters, options)
	ret0, _ := ret[0].(azkeys.SignResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *KeyVaultClientMockRecorder) Sign(ctx, name, version, parameters, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*KeyVaultClient)(nil).Sign), ctx, name, version, parameters, options)
}
